@using System.Globalization
@model WeatherForecast

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Forecast - Temperature, Wind Speed, and Radiation</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<h1>Weather Forecast - Temperature, Wind Speed, and Radiation</h1>

<!-- User input for latitude and longitude -->
<div>
    <label for="latitudeInput">Latitude:</label>
    <input type="text" id="latitudeInput" step="any" placeholder="Enter latitude" oninput="updateCoordinates()"
           value="@Model.Latitude" />
</div>
<div>
    <label for="longitudeInput">Longitude:</label>
    <input type="text" id="longitudeInput" step="any" placeholder="Enter longitude" oninput="updateCoordinates()"
           value="@Model.Longitude" />
</div>

<!-- Subtitle displaying selected coordinates -->
<h2 id="selectedCoordinates">
    Selected Coordinates: @Model.Latitude.ToString("F2",CultureInfo.InvariantCulture), @Model.Longitude.ToString("F2",CultureInfo.InvariantCulture)
</h2>

<!-- Form to post the selected coordinates and fetch new data -->
<form id="coordinatesForm" method="post" asp-action="Index">
    <input type="hidden" step="any" id="latitude" name="latitude" value="@Model.Latitude" />
    <input type="hidden" step="any" id="longitude" name="longitude" value="@Model.Longitude" />
    <button type="submit">Get Weather</button>
</form>

<canvas id="weatherChart" width="400" height="200"></canvas>

<script>
    window.onload = function() {
        // Initialize chart and other data (assume Model data is available)
        var ctx = document.getElementById('weatherChart').getContext('2d');
        var times = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Minutely15.Time.Select(t => t.ToString("yyyy-MM-dd HH:mm")).ToList()));
        var temperatureData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Minutely15.Temperature2m));
        var windSpeedData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Minutely15.WindSpeed10m));
        var radiationData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Minutely15.ShortwaveRadiation));

        var weatherChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: times,
                datasets: [{
                    label: 'Temperature (°C)',
                    data: temperatureData,
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: false,
                    yAxisID: 'y1'
                },
                    {
                        label: 'Wind Speed (m/s)',
                        data: windSpeedData,
                        borderColor: 'rgb(54, 162, 235)',
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        fill: false,
                        yAxisID: 'y2'
                    },
                    {
                        label: 'Radiation (W/m²)',
                        data: radiationData,
                        borderColor: 'rgb(75, 192, 192)',
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        fill: false,
                        yAxisID: 'y3'
                    }]
            },
            options: {
                responsive: true,
                scales: {
                    x: {
                        type: 'category',
                        title: {
                            display: true,
                            text: 'Date and Time'
                        },
                        ticks: {
                            autoSkip: true,
                            maxTicksLimit: 20
                        }
                    },
                    y1: {
                        type: 'linear',
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Temperature (°C)'
                        }
                    },
                    y2: {
                        type: 'linear',
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Wind Speed (m/s)'
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    },
                    y3: {
                        type: 'linear',
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Radiation (W/m²)'
                        },
                        grid: {
                            drawOnChartArea: false
                        },
                        offset: true
                    }
                }
            }
        });
    };

    // Update coordinates and send them to form inputs
    function updateCoordinates() {
        var latitude = document.getElementById('latitudeInput').value;
        var longitude = document.getElementById('longitudeInput').value;

        // Check if the values are valid numbers before updating
        if (!isNaN(latitude) && !isNaN(longitude)) {
            // Update subtitle with selected coordinates
            document.getElementById('selectedCoordinates').innerText = 'Selected Coordinates: ' + latitude + ', ' + longitude;

            // Update form fields with selected coordinates
            document.getElementById('latitude').value = latitude;
            document.getElementById('longitude').value = longitude;
        } else {
            // Clear subtitle if coordinates are invalid
            document.getElementById('selectedCoordinates').innerText = 'Selected Coordinates: ';
        }
    }
</script>
</body>
</html>
